# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WtyczkaDialog
                                 A QGIS plugin
 Obliczenie wysokości z 2 punktów i pola z 3 lub wiecej punktów
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-08
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Dominika Wiktoria
        email                : 01179138@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets, QtCore
from qgis.utils import iface
from qgis.core import QgsWkbTypes, Qgis
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'projekt_22_dialog_base.ui'))


class WtyczkaDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(WtyczkaDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.wtyczka_qgis()
        self.radioButton.clicked.connect(self.wysokosc)
        self.radioButton_2.clicked.connect(self.pole)

    def wtyczka_qgis(self):
        self.listWidget.clear()
        test = iface.activeLayer()
        if not test:
            iface.messageBar().pushMessage("Błąd", "Brak aktywnej warstwy!", level= Qgis.Warning)
            return
        if test.geometryType() != QgsWkbTypes.PointGeometry:
            iface.messageBar().pushMessage("Błąd", "Warstwa nie jest warstwa punktową", level= Qgis.Warning)
            return
        for obiekty in test.getFeatures():
            wartosc = QtWidgets.QListWidgetItem(f"Numer punktu: {obiekty.id()}")
            wartosc.setData(QtCore.Qt.UserRole, obiekty)
            self.listWidget.addItem(wartosc)
            
    def wysokosc(self):
        lista = self.listWidget.selectedItems()
        pkt_wys = [wartosc.data(QtCore.Qt.UserRole) for wartosc in lista]
        if len(pkt_wys) == 2:
            H1 = pkt_wys[0].attribute('wysokosc')
            H2 = pkt_wys[1].attribute('wysokosc')
            roznica_wysokosci = round((H2 - H1),3)
            iface.messageBar().pushMessage("Wynik", f"Różnica wysokości między {pkt_wys[0].id()} i {pkt_wys[1].id()} to: {roznica_wysokosci} m", level=Qgis.Success)
        if len(pkt_wys)!=2:
            iface.messageBar().pushMessage("Błąd", "Róznice wysokosci mozna policzyc tylko podajac 2 punkty!", level= Qgis.Warning)
            return
            
    def pole(self):
        lista2 = self.listWidget.selectedItems()
        pkt = [wartosc.data(QtCore.Qt.UserRole) for wartosc in lista2]
        if len(pkt)>2:
            wspolrzedne = [(punkty.geometry().asPoint().x(), punkty.geometry().asPoint().y()) for punkty in pkt]

            do_pola = len(wspolrzedne)
            pole_3 = 0
            for i in range(do_pola):
                x_1, y_1 = wspolrzedne[i]
                x_2, y_2 = wspolrzedne[(i + 1) % do_pola]
                pole_3 += x_1 * y_2 - y_1 * x_2
            pole_3 = (abs(pole_3) / 2)
            pole_3 = round((pole_3/10000),3)
            numery = ";".join(str(punkty.id()) for punkty in pkt)

            iface.messageBar().pushMessage("Wynik", f"Pole powierzchni figury pomiędzy punktami o numerach {numery} wynosi: {pole_3} ha", level=Qgis.Success)
        if len(pkt)<2:
            iface.messageBar().pushMessage("Błąd", "Do obliczenia pola podaj conajmniej 3 punkty!", level= Qgis.Warning)
            return